I"‹K<h2 id="table-of-contents">Table of Contents</h2>

<ol>
  <li><a href="#metaprogramming">Metaprogramming</a></li>
  <li><a href="#dependency-management">Dependency management</a>
    <ol>
      <li><a href="#programming-language-library-dependencies">Programming language library 
dependencies</a></li>
      <li><a href="#example">Example</a></li>
    </ol>
  </li>
  <li><a href="#unit-testing">Unit testing</a>
    <ol>
      <li><a href="#example-1">Example</a></li>
    </ol>
  </li>
  <li><a href="#credit">Credit</a></li>
</ol>

<h2 id="metaprogramming">Metaprogramming</h2>

<p>This Lab is a continuation of the metaprogramming topics from last week.</p>

<p>This week we will be covering dependency management and unit testing, two 
extremely useful topics for all Computer Scientists. See the introduction to 
metaprogramming <a href="build_systems_and_cont_int#metaprogramming">here</a>.</p>

<h2 id="dependency-management">Dependency management</h2>

<p>Hopefully you‚Äôve seen last week‚Äôs section on build automation systems, and so 
you‚Äôve got the idea of dependencies. It‚Äôs likely a project will have 
dependencies that are themselves projects, maybe relying on installed programs 
(like <code class="language-plaintext highlighter-rouge">python</code> or <code class="language-plaintext highlighter-rouge">pdflatex</code>), system packages (like <code class="language-plaintext highlighter-rouge">openssl</code>), or libraries 
within a programming language or technology (like <code class="language-plaintext highlighter-rouge">matplotlib</code> or <code class="language-plaintext highlighter-rouge">graphicx</code>).</p>

<p>The majority of these types of dependencies will be available through 
repositories which host a large number of the dependencies you would want. For 
example, there is the ‚ÄúUbuntu package repository‚Äù for Ubuntu packages, or ‚ÄúPyPi‚Äù 
for Python Libraries.</p>

<h3 id="programming-language-library-dependencies">Programming language library dependencies</h3>

<p>In any project you are likely to want to use projects and libraries made by other 
people. This is and has always been one of the best things about Computer 
Science. Almost all projects would be nigh on impossible if you and/or your team 
had to make it all. Instead, computer scientists all around the 
world contribute together to every 
project you could make.</p>

<p>However, as beautiful and inspiring this can be, it does present a difficult 
problem - how can you get these libraries and modules into your projects.
Sounds easy enough, but turns out to become one of the biggest headaches 
Computer Scientists deal with.</p>

<p>In an ideal world where each library was feature complete and bug-free when it 
was released this would be easy. Copy the code into your project and use it. 
Simple. However, the world has an irritating resistance to being simple and 
perfect.</p>

<p>All modules should be updated often, fixing bugs and adding features. This may 
lead you to think you could just use one version and live with its bugs and feature 
set, and certainly this strategy is sometimes used. But in a lot 
of projects there will be security considerations. In these projects it is 
essential that you keep up to date with the latest releases in order to not have 
known vulnerabilities in your project.</p>

<p>Additionally, you may need new features, or new features may become demanded by 
your users, or your platform may deprecate versions of libraries you‚Äôre using.</p>

<p>I‚Äôm going to stop listing considerations because I could go on for a while. 
What should become clear is that the complexity of the world causes spiralling 
complexity that would very quickly make any manual solution to this problem 
untenable.</p>

<p>Thus we have dependency managers. Most languages and technologies have one or 
more, and how they work varies from one to another. Still, they can save you a 
lot of time and headaches.</p>

<p>Most dependency managers allow you to have a list of dependencies your project 
needs, then will download them on command. This is useful when working with 
version control as the version control system doesn‚Äôt have to deal with the 
library files, just the file listing the dependencies.</p>

<p>It is common that libraries will in turn require other libraries - most 
dependency managers have systems for dependencies defining their own 
dependencies and fetching them. Additionally it will avoid duplicates if 
multiple dependencies require the same libraries.</p>

<h3 id="example">Example</h3>

<p>We‚Äôre going to do a very brief example with the Node.js <code class="language-plaintext highlighter-rouge">npm</code> tool.</p>

<p>I‚Äôve made an extremely simple Node application that uses another <code class="language-plaintext highlighter-rouge">npm</code> module. To 
use <code class="language-plaintext highlighter-rouge">npm</code> to manage the dependencies I first have to make a <code class="language-plaintext highlighter-rouge">package.json</code> file:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"TechnicalLabsExample"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Example app"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Alfie Richards"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"mathjs"</span><span class="p">:</span><span class="w"> </span><span class="s2">"8.0.1"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>Note:</strong> As always the files we use in these examples are available in the 
<a href="https://github.com/bath-bcss/Technical-Labs">Technical Labs repository</a>.</p>

<p>In the dependencies you can see I require a module called <code class="language-plaintext highlighter-rouge">mathsjs</code> and I
require a specific version. I can then get Node to install the modules and any 
of its dependencies with the command <code class="language-plaintext highlighter-rouge">npm install</code>. <code class="language-plaintext highlighter-rouge">npm</code> will then fetch the 
module, and I can use it in the Node program. It stores them in the 
<code class="language-plaintext highlighter-rouge">node_modules/</code> directory.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">mathjs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">mathjs</span><span class="dl">"</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mathjs</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">mathjs</span><span class="p">.</span><span class="nx">e</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</code></pre></div></div>

<p>Running <code class="language-plaintext highlighter-rouge">node main.js</code> returns <code class="language-plaintext highlighter-rouge">2.718</code> using the module. <code class="language-plaintext highlighter-rouge">npm</code> has a lot 
more features, but we won‚Äôt cover them in these labs.</p>

<h2 id="unit-testing">Unit testing</h2>

<p>It would be great if everything always worked as intended, but it rarely does. 
To ensure that your software does what it‚Äôs supposed to, we test it. I‚Äôm sure 
everyone has done manual testing - I spent a long time copying and pasting into 
my SRPN coursework to check that it worked. But this testing can very quickly 
become incredibly tiresome, so we can automate it!</p>

<p>Unit testing is a type of testing that focuses on testing the smallest 
components. For each component of your software solution, you make a collection 
of tests to make sure that its functionality works. A great unit testing suite can 
build confidence when working as you can always run the unit tests to make sure 
you haven‚Äôt broken any functionality.</p>

<p>Additionally, when using a continuous integration setup with unit tests you will 
be able to see exactly which commits added or broke functionality.</p>

<p>Manual testing can be slow and time consuming, so making a suite of unit 
tests can often save a lot of time compared to the time it would take to test 
everything manually.</p>

<p>There are a lot of frameworks and libraries to make unit testing easier. Many 
platforms have their own unit tests also. For GUI projects you can also make 
automated tests to test graphical components for many platforms. For example 
<a href="https://developer.android.com/training/testing/ui-automator">Android‚Äôs UI 
Automator</a>.</p>

<h3 id="example-1">Example</h3>

<p>In this example I‚Äôm going to make some unit tests for my Data Structures and 
Algorithms coursework. I‚Äôm going to use the popular JUnit test suite for Java.</p>

<p>The coursework involves implementing 4 different sorting algorithms. My unit 
test is going to shuffle two sorted arrays and then check that the output of my 
functions is the same as the original arrays.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestSuite</span> <span class="o">{</span>

  <span class="nc">Contact</span><span class="o">[]</span> <span class="n">test1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Contact</span><span class="o">[]</span> <span class="o">{</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">"C"</span><span class="o">,</span> <span class="s">"C"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"B"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">"B"</span><span class="o">,</span> <span class="s">"A"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">"B"</span><span class="o">,</span> <span class="s">"B"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">"A"</span><span class="o">,</span> <span class="s">"A"</span><span class="o">)</span>
  <span class="o">};</span>

  <span class="nc">Contact</span><span class="o">[]</span> <span class="n">test2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Contact</span><span class="o">[]</span> <span class="o">{</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="s">"9"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="s">"8"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="s">"7"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="s">"6"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="s">"5"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="s">"4"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="s">"3"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="s">"2"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="s">"1"</span><span class="o">),</span>
    <span class="k">new</span> <span class="nf">Contact</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="s">"0"</span><span class="o">)</span>
  <span class="o">};</span>

  <span class="kd">public</span> <span class="nf">TestSuite</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">test1</span><span class="o">);</span>
    <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">test2</span><span class="o">);</span>
  <span class="o">}</span>
 
  <span class="nd">@Test</span>
  <span class="kt">void</span> <span class="nf">testSelection</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Contact</span><span class="o">[]</span> <span class="n">testArray1</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">test1</span><span class="o">,</span> <span class="n">test1</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Contact</span><span class="o">&gt;</span> <span class="n">testList1</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">testArray1</span><span class="o">);</span>
    <span class="nc">Collections</span><span class="o">.</span><span class="na">shuffle</span><span class="o">(</span><span class="n">testList1</span><span class="o">);</span>
    <span class="n">testList1</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="n">testArray1</span><span class="o">);</span>

    <span class="nc">Contact</span><span class="o">[]</span> <span class="n">testArray2</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">test2</span><span class="o">,</span> <span class="n">test2</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Contact</span><span class="o">&gt;</span> <span class="n">testList2</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">testArray2</span><span class="o">);</span>
    <span class="nc">Collections</span><span class="o">.</span><span class="na">shuffle</span><span class="o">(</span><span class="n">testList2</span><span class="o">);</span>
    <span class="n">testList2</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="n">testArray2</span><span class="o">);</span>

    <span class="nc">Sorter</span><span class="o">.</span><span class="na">selectionSort</span><span class="o">(</span><span class="n">testArray1</span><span class="o">);</span>
    <span class="n">assertTrue</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">testArray1</span><span class="o">,</span> <span class="n">test1</span><span class="o">));</span>

    <span class="nc">Sorter</span><span class="o">.</span><span class="na">selectionSort</span><span class="o">(</span><span class="n">testArray2</span><span class="o">);</span>
    <span class="n">assertTrue</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">testArray2</span><span class="o">,</span> <span class="n">test2</span><span class="o">));</span>
  <span class="o">}</span>

  <span class="c1">// ... Repeat for 3 other sorting algorithms</span>

<span class="o">}</span>
</code></pre></div></div>

<p>Note I annotate the function with <code class="language-plaintext highlighter-rouge">@Test</code> to let JUnit know to run these 
functions when I run the tests. I then call the <code class="language-plaintext highlighter-rouge">assertTrue()</code> function. If the 
value I pass in is false then the test will fail.</p>

<p>Now as I change or implement algorithms I can always very quickly and reliably 
make sure the algorithms work.</p>

<p>Here you can see in IntelliJ that all tests passed, and that the tests only took 
14ms, so I could run them as often as I wanted.</p>

<p><img src="/assets/DMAUT/IntelliJUnitTests.png" alt="IntelliJ JUnit tests" /></p>

<h2 id="credit">Credit</h2>

<p>Inspired by <a href="https://missing.csail.mit.edu">Missing semester series</a>. Research 
from <a href="https://junit.org/junit5/">JUnit documentation</a>, <a href="https://docs.npmjs.com/about-npm"><code class="language-plaintext highlighter-rouge">npm</code> 
documentation</a>, and <a href="https://nodejs.org/en/docs/">node.js 
documentation</a>.</p>

<p>Written by <a href="https://www.alfierichards.com">Alfie Richards</a></p>

<p>Editing by <a href="mailto:jjc82@bath.ac.uk">Joseph Cryer</a>.</p>

<p>For additional help</p>

<p>Please send any corrections <a href="mailto:alfierchrds@gmail.com">here</a>.</p>
:ET